<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="doctg.xsl" ?>
<testgroup 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://www.openscdp.org/schema/testframework-1.0.xsd"
	id="tg_select" arrayElement="testcase,function" arrayIndex="id,Name">
	<name>SELECT APDU Test Group</name>
	<description>
		<p>This group of tests verify the implementation of the SELECT APDU</p>
	</description>
	<reference>
		<p>ISO 7816-4</p>
	</reference>

<!-- Initializing the test group environment -->
<!-- Enable this if you want your own constructor
	<constructor Param="name, parameter">
		<Script><![CDATA[
	
	// Call constructor of super class TestGroup and define name of test group
	TestGroup.call(this, name, parameter);
	
		]]></Script>
	</constructor>
-->

	
<!-- Setup method called before each test case is executed -->
	<setup>
		<Script><![CDATA[

	this.card = this.parameter.card;
	
	this.card.reset(Card.RESET_COLD);
			
		]]></Script>
	</setup>


	
<!-- Teardown method called after each test case is executed -->
	<teardown>
		<Script><![CDATA[
		
//	print("TestGroup.teardown() called.");

		]]></Script>
	</teardown>



<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="001SelectMFNoCDataNoFCP">
		<name>Select MF No CData No FCP</name>
		<description>
			<p>Select MF without file identifier, requesting no FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of the MF using the SELECT APDU without a data field and P2='0C'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<Script><![CDATA[

	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x0C, [0x9000]);

	this.assertTrue(fcp.length == 0, "Select MF with P2='0C' returned data");
	
		]]></Script>
	</testcase>



	<testcase id="002SelectMFWithCDataNoFCP">
		<name>Select MF With CData No FCP</name>
		<description>
			<p>Select MF with file identifier, requesting no FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of the MF using the SELECT APDU with '3F00' in the data field and P2='0C'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<Script><![CDATA[

	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x0C, new ByteString("3F00", HEX), [0x9000]);

	this.assertTrue(fcp.length == 0, "Select MF with P2='0C' returned data");
	
		]]></Script>
	</testcase>



	<testcase id="003SelectMFNoCDataFCP">
		<name>Select MF No CData With FCP</name>
		<description>
			<p>Select MF without file identifier, requesting the FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of the MF using the SELECT APDU without a data field and P2='04'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<procedures arrayElement="procedure" arrayIndex="#">
			<procedure id="tp_fci"/>
		</procedures>
		<Script><![CDATA[

	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x04, [0x9000]);

	this.assertTrue(fcp.length > 0, "Select MF with P2='04' did not return data");
	
	var param = { dut: fcp, type: 0x62};
	
	var result = this.runTestProcedure("tp_fci", param);

		]]></Script>
	</testcase>



	<testcase id="004SelectMFWithCDataWithFCP">
		<name>Select MF With CData With FCP</name>
		<description>
			<p>Select MF with file identifier, requesting the FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of the MF using the SELECT APDU with '3F00' in the data field and P2='04'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<procedures arrayElement="procedure" arrayIndex="#">
			<procedure id="tp_fci"/>
		</procedures>
		<Script><![CDATA[

	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x04, new ByteString("3F00", HEX), [0x9000]);

	this.assertTrue(fcp.length > 0, "Select MF with P2='04' did not return data");
	
	var param = { dut: fcp, type: 0x62};
	
	var result = this.runTestProcedure("tp_fci", param);

		]]></Script>
	</testcase>



	<testcase id="010SelectEFNoFCP">
		<name>Select EF No FCP</name>
		<description>
			<p>Select an EF with file identifier, requesting no FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of an EF using the SELECT APDU with the file identifier
			   in the data field and P2='0C'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<Script><![CDATA[

	var dm = this.parameter.dataModel;
	var fid = new ByteString(dm.getNode("MF/EF_GDO").fid, HEX);
	
	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x0C, fid, [0x9000]);

	this.assertTrue(fcp.length == 0, "Select EF with P2='0C' returned data");
	
		]]></Script>
	</testcase>



	<testcase id="011SelectEFWithFCP">
		<name>Select EF With FCP</name>
		<description>
			<p>Select an EF with file identifier, requesting the FCP</p>
		</description>
		<requirement>
			<p>The card must support the selection of an EF using the SELECT APDU with the file identifier
			   in the data field and P2='04'.</p>
		</requirement>
		<reference>
			<p>ISO 7816-4</p>
		</reference>
		<procedures arrayElement="procedure" arrayIndex="#">
			<procedure id="tp_fci"/>
		</procedures>
		<Script><![CDATA[

	var dm = this.parameter.dataModel;
	var ef = dm.getNode("MF/EF_GDO");
	var fid = new ByteString(ef.fid, HEX);
	
	var fcp = this.card.sendApdu(0x00, 0xA4, 0x00, 0x04, fid, [0x9000]);

	this.assertTrue(fcp.length > 0, "Select EF with P2='04' did not return data");
	
	var param = { dut: fcp, type: 0x62, t80: parseInt(ef.size)};
	
	var result = this.runTestProcedure("tp_fci", param);

		]]></Script>
	</testcase>

</testgroup>
