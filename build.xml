<?xml version="1.0" encoding="UTF-8"?>
<project name="doc" basedir="." default="applyTemplate">

	<property name="jsdoc" location="jsdoc"/>
	<property name="build" location="build"/>
	<property name="doc" location="doc"/>
	

	<target name="init">
		<tstamp />
	</target>


	<target name="applyTemplate" depends="convertJS,convertTutorialJS">
		<apply executable="perl" dir="${doc}" force="true">
			<arg value="stt.pl" />
			<fileset dir="." includes="**/*.html"/>
		</apply>
			
		<delete>
			<fileset dir="." includes="**/*.html~" defaultexcludes="false"/>
		</delete>
	</target>


	<target name="convertJS">
		<apply executable="perl" addsourcefile="false" dir="${basedir}">
			<arg value="${doc}/js2html.pl" />
			<arg value="templatesubdir.dwt" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}">
				<include name="**/*.js"/>
				<exclude name="eID/**"/>
				<exclude name="emv/**"/>
				<exclude name="icao/**"/>
				<exclude name="sc-hsm/**"/>
				<exclude name="cardsim/**"/>
				<exclude name="build/**"/>
				<exclude name="tutorial/**"/>
				<exclude name="perso/**"/>
				<exclude name="globaltester/**"/>
				<exclude name="mifare/**"/>
				<exclude name="apdutest/**"/>
				<exclude name=".settings.js"/>
			</fileset>

			<redirector>
				<!-- redirect STDIN; fileset collects relative to its dir, but we need -->
				<!-- relative to basedir -->
				<inputmapper type="identity"/>
				<!-- redirect STDOUT to file in dest-dir -->
				<outputmapper type="glob" from="*.js" to="${doc}/*.html"/>
			</redirector>
		</apply>
	</target>


	<target name="convertTutorialJS">
		<apply executable="perl" addsourcefile="false" dir="${basedir}">
			<arg value="${doc}/js2html.pl" />
			<arg value="templatesubsubdir.dwt" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}">
				<include name="tutorial/**/*.js"/>
			</fileset>

			<redirector>
				<!-- redirect STDIN; fileset collects relative to its dir, but we need -->
				<!-- relative to basedir -->
				<inputmapper type="identity"/>
				<!-- redirect STDOUT to file in dest-dir -->
				<outputmapper type="glob" from="*.js" to="${doc}/*.html"/>
			</redirector>
		</apply>
	</target>


	<target name="jsdoc">
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/icao" parallel="true" relative="true">
			<arg line="--directory=${doc}/icao/jsdoc" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/icao" includes="**/*.js"/>
		</apply>
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/cardsim" parallel="true" relative="true">
			<arg line="--directory=${doc}/cardsim/jsdoc" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/cardsim" includes="**/*.js"/>
		</apply>
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/eID" parallel="true" relative="true">
			<arg line="--directory=${doc}/eID/jsdoc" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/eID" includes="**/*.js"/>
		</apply>
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/emv" parallel="true" relative="true" verbose="true">
			<arg line="--directory='${doc}/emv/jsdoc'" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/emv" includes="**/*.js"/>
		</apply>
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/mifare" parallel="true" relative="true" verbose="true">
			<arg line="--directory='${doc}/mifare/jsdoc'" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/mifare" includes="**/*.js"/>
		</apply>
		<apply executable="jsdoc" addsourcefile="true" dir="${basedir}/sc-hsm" parallel="true" relative="true" verbose="true">
			<arg line="--directory='${doc}/sc-hsm/jsdoc'" />
			<!-- Collect the JS-files -->
			<fileset dir="${basedir}/sc-hsm" includes="**/*.js"/>
		</apply>
	</target>


	<target name="package" depends="init, applyTemplate, jsdoc">
		<property name="bundlename" value="scripts-${DSTAMP}.zip"/>
		<property name="bundle" location="released/${bundlename}"/>
		<filter token="bundlename" value="${bundlename}"/>

		<mkdir dir="${build}"/>
			
		<copy todir="${build}">
			<fileset dir="${basedir}">
				<exclude name="doc/"/>
				<exclude name="**/.svn"/>
				<exclude name="build.xml"/>
				<exclude name="build/"/>
				<exclude name="released/"/>
			</fileset> 
		</copy>

		<copy todir="${build}/doc" filtering="true">
			<fileset dir="${doc}">
				<include name="**/*.html"/>
			</fileset> 
		</copy>

		<copy todir="${build}/doc">
			<fileset dir="${doc}">
				<include name="**/*.css"/>
				<include name="**/*.jpg"/>
				<include name="**/*.gif"/>
				<include name="**/*.png"/>
			</fileset> 
		</copy>

		<mkdir dir="released"/>
		
		<zip destfile="${bundle}" includes="*">
			<zipfileset dir="${build}" prefix="scripts"/>
		</zip>
	</target>


	<target name="publish" depends="init">
		<property name="bundlename" value="scripts-${DSTAMP}.zip"/>
		<property name="bundle" location="released/${bundlename}"/>

		<exec executable="scp" dir="${build}/doc">
			<arg line="-r . asc@diavola:/var/www/openscdp.org/scripts" />
		</exec>
		<exec executable="scp" dir="${basedir}">
			<arg line="${bundle} asc@diavola:/var/www/openscdp.org/scripts" />
		</exec>
	</target>


	<target name="clean">
		<delete dir="${build}"/>
	</target>

</project>