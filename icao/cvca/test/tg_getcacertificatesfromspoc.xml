<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="doctg.xsl" ?>
<testgroup 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://www.openscdp.org/schema/testframework-1.0.xsd"
	id="tg_getcacertificatesfromspoc" arrayElement="testcase,function" arrayIndex="id,Name">
	<name>Testing GetCACertificates in SPOC setup</name>
	<description>
		<p>Test basic communication between EAC-PKI components</p>
	</description>
	<reference>
		<p>No reference defined.</p>
	</reference>

<!-- Initializing the test group environment -->
<!-- Enable this if you want your own constructor
	<constructor Param="name, parameter">
		<Script><![CDATA[
	
	// Call constructor of super class TestGroup and define name of test group
	TestGroup.call(this, name, parameter);
	
		]]></Script>
	</constructor>
-->

	
<!-- Setup method called before each test case is executed -->
	<setup>
		<Script><![CDATA[

		resetDataDir();
		this.t = new HTTPTester(this.parameter.url);

		]]></Script>
	</setup>


	
<!-- Teardown method called after each test case is executed -->
	<teardown>
		<Script><![CDATA[
		
//	this.log("TestGroup.teardown() called.");

		]]></Script>
	</teardown>



	<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="001OneECCCertificate">
		<name></name>
		<description>
			<p>GetCACertificates() with one root ECC certificate in the system</p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate root certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" SPOC asynchronous GetCACertificates");
	this.t.call("cvca?op=getcacertificates", "ok_reception_ack");
	this.t.call("cvca-fu/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" DVCA synchronous GetCACertificates");
	this.t.call("dvca?op=update", "ok_cert_available");

	this.log(" DVCA asynchronous GetCACertificates");
	this.t.call("dvca?op=updateasync", "ok_syntax");
	this.t.call("cvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" TCC synchronous GetCACertificates");
	this.t.call("tcc?op=update", "ok_cert_available");

	this.log(" TCC asynchronous GetCACertificates");
	this.t.call("tcc?op=updateasync", "ok_syntax");
	this.t.call("dvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

		]]></Script>
	</testcase>



<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="002TwoECCCertificates">
		<name></name>
		<description>
			<p>GetCACertificates() with two ECC certificate (root / link) in the system</p>
		</description>
		<requirement>
			<p>The requirement tests with this test case is ...</p>
		</requirement>
		<reference>
			<p>The requirement is defined in ...</p>
		</reference>
		<Script><![CDATA[

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate root certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" SPOC asynchronous GetCACertificates");
	this.t.call("cvca?op=getcacertificates", "ok_reception_ack");
	this.t.call("cvca-fu/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" DVCA synchronous GetCACertificates");
	this.t.call("dvca?op=update", "ok_cert_available");

	this.log(" DVCA asynchronous GetCACertificates");
	this.t.call("dvca?op=updateasync", "ok_syntax");
	this.t.call("cvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" TCC synchronous GetCACertificates");
	this.t.call("tcc?op=update", "ok_cert_available");

	this.log(" TCC asynchronous GetCACertificates");
	this.t.call("tcc?op=updateasync", "ok_syntax");
	this.t.call("dvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

		]]></Script>
	</testcase>


	<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="003ThreeECCCertificates">
		<name></name>
		<description>
			<p>GetCACertificates() with three ECC certificate (root / link with dp / link without dp) in the system</p>
		</description>
		<requirement>
			<p>The requirement tests with this test case is ...</p>
		</requirement>
		<reference>
			<p>The requirement is defined in ...</p>
		</reference>
		<Script><![CDATA[

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate root certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate without domain parameter");
	this.t.call("cvca-fu?op=link", "Operation completed");

	this.log(" SPOC asynchronous GetCACertificates");
	this.t.call("cvca?op=getcacertificates", "ok_reception_ack");
	this.t.call("cvca-fu/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" DVCA synchronous GetCACertificates");
	this.t.call("dvca?op=update", "ok_cert_available");

	this.log(" DVCA asynchronous GetCACertificates");
	this.t.call("dvca?op=updateasync", "ok_syntax");
	this.t.call("cvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" TCC synchronous GetCACertificates");
	this.t.call("tcc?op=update", "ok_cert_available");

	this.log(" TCC asynchronous GetCACertificates");
	this.t.call("tcc?op=updateasync", "ok_syntax");
	this.t.call("dvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

		]]></Script>
	</testcase>



	<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="004ThreeECCOneRSACertificates">
		<name></name>
		<description>
			<p>GetCACertificates() with three ECC certificates (root / link with dp / link without dp) and one RSA certificate in the system</p>
		</description>
		<requirement>
			<p>The requirement tests with this test case is ...</p>
		</requirement>
		<reference>
			<p>The requirement is defined in ...</p>
		</reference>
		<Script><![CDATA[

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate root certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=link", "Operation completed");

	this.log(" Switch to RSA2048PSSwithSHA256");
	this.t.call("cvca-fu?op=change&keyspec=RSA2048PSSwithSHA256");

	this.log(" Generate link certificate");
	this.t.call("cvca-fu?op=link", "Operation completed");

	this.log(" SPOC asynchronous GetCACertificates");
	this.t.call("cvca?op=getcacertificates", "ok_reception_ack");
	this.t.call("cvca-fu/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" DVCA synchronous GetCACertificates");
	this.t.call("dvca?op=update", "ok_cert_available");

	this.log(" DVCA asynchronous GetCACertificates");
	this.t.call("dvca?op=updateasync", "ok_syntax");
	this.t.call("cvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" TCC synchronous GetCACertificates");
	this.t.call("tcc?op=update", "ok_cert_available");

	this.log(" TCC asynchronous GetCACertificates");
	this.t.call("tcc?op=updateasync", "ok_syntax");
	this.t.call("dvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

		]]></Script>
	</testcase>



	<!-- Each test case must be declared with an id that starts with a 3 digit number -->
	<testcase id="005ThreeECCOneRSAOneECCCertificates">
		<name></name>
		<description>
			<p>GetCACertificates() with three ECC certificates (root / link with dp / link without dp) and one RSA and one ECC certificate in the system</p>
		</description>
		<requirement>
			<p>The requirement tests with this test case is ...</p>
		</requirement>
		<reference>
			<p>The requirement is defined in ...</p>
		</reference>
		<Script><![CDATA[

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate root certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" Generate link certificate with domain parameter");
	this.t.call("cvca-fu?op=link", "Operation completed");

	this.log(" Switch to RSA2048PSSwithSHA256");
	this.t.call("cvca-fu?op=change&keyspec=RSA2048PSSwithSHA256");

	this.log(" Generate link certificate");
	this.t.call("cvca-fu?op=link", "Operation completed");

	this.log(" Switch to brainpoolP256r1withSHA256");
	this.t.call("cvca-fu?op=change&keyspec=brainpoolP256r1withSHA256");

	this.log(" Generate link certificate");
	this.t.call("cvca-fu?op=linkdp", "Operation completed");

	this.log(" SPOC asynchronous GetCACertificates");
	this.t.call("cvca?op=getcacertificates", "ok_reception_ack");
	this.t.call("cvca-fu/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" DVCA synchronous GetCACertificates");
	this.t.call("dvca?op=update", "ok_cert_available");

	this.log(" DVCA asynchronous GetCACertificates");
	this.t.call("dvca?op=updateasync", "ok_syntax");
	this.t.call("cvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

	this.log(" TCC synchronous GetCACertificates");
	this.t.call("tcc?op=update", "ok_cert_available");

	this.log(" TCC asynchronous GetCACertificates");
	this.t.call("tcc?op=updateasync", "ok_syntax");
	this.t.call("dvca/getcert?index=-1&action=ok_cert_available", "ok_received_correctly");

		]]></Script>
	</testcase>
	
</testgroup>
